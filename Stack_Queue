#include <iostream>
using namespace std;
class Node{
    public :
    int data;
    Node * next ;
    Node(int value){
        data=value;
        next=nullptr;
    }
};
class Stack{
    public:
    Node * top ;
    Stack(){
        top=nullptr;
    }
    void push (int value){
        Node *newNode=new Node(value);
        if(top==nullptr){
            top=newNode;
        }else{
            newNode->next=top;
            top=newNode;
        }
    }
    void pop (){
        if(top==nullptr){
            cout<<"no poping aşk"<<endl;
        }else{
            Node * temp= top;
            top=temp->next;
            delete temp;
        }
    }
    void print(){
        Node *temp=top;
        for(temp=top;temp!=nullptr;temp=temp->next){
            cout<<temp->data<<endl;
        }
    }
    void reverse(){
        
    Node* prev = nullptr;
    Node* current = top;
    Node* nextNode = nullptr;

    while(current != nullptr) {
        nextNode = current->next; 
        current->next = prev; 
        prev = current; 
        current = nextNode; 
    }
    top = prev; 
    }
};
class Queue{
    public:
    Node * head ;
    Node * tail;
    
    Queue(){
        head= nullptr;
        tail=nullptr;
    }
    
    void enqueue(int value){
        Node * newNode= new Node(value);
        if(head==nullptr){
            head=newNode;
            tail=newNode;
        }else{
            tail->next=newNode;
            tail=newNode;
            tail->next=nullptr;
        }
    }
    void dequeue(){
        Node *temp = head;
        if(head==nullptr){
            cout<<"there are not node to delete"<<endl;
        }
        else{
            head=head->next;
            delete temp;
            temp=nullptr;
        }
    }
    void reversequeue(){
        Node* prev = nullptr;
        Node* current = head;
        Node* nextNode = nullptr;

    while(current != nullptr) {
        nextNode = current->next; 
        current->next = prev; 
        prev = current; 
        current = nextNode; 
    }
    head = prev; 
    }
    void printqueue(){
        Node * temp=head;
        for(temp=head;temp!=nullptr;temp=temp->next){
            cout<<temp->data<<endl;
        }
    }
     
    bool isEmpty(){
        if(head==nullptr){
            cout<<"yes it is empty"<<endl;
            return true;
        }
        cout<<"not empty"<<endl;
        return false;
    }
    
    int size (){
        Node *temp=head;
        int size=0;
        while(temp!=nullptr){
            size++;
            temp=temp->next;
        }
        return size;
    }
    void sorterenqueue(int value){
        Node *newNode =new Node(value);
        
        if(head==nullptr || value < head->data){
            newNode->next=head;
            head=newNode;
        } 
        
        Node *temp = head;
        Node *nextn = head->next;

    while (nextn != nullptr) {
        if (temp->data <= value && value <= nextn->data) {
            temp->next = newNode;
            newNode->next = nextn;
            return;
        }
        temp = temp->next;
        nextn = nextn->next;
    }
    }
    
 void deleteodd(){
    Node * current=head;
    
    while (current != nullptr && current->next != nullptr) {
        if (current->next->data % 2 != 0) {
            Node* oddNode = current->next;
            current->next = oddNode->next; // Bypass the odd node
            delete oddNode;
        }
        current=current->next;
    }
 }
 void findmiddle(){
    Node *slow = head;
	Node *fast = head;
 
	    while (fast != nullptr && fast->next != nullptr) {
		slow = slow->next;
		fast = fast->next->next;
	    }
 
	    cout<<slow->data<<" is your middle"<<endl;
	}
	bool hasloop(){
	    Node *fast=head;
	    Node *slow=head;
	    while(fast!=nullptr&&fast->next!=nullptr){
	        fast=fast->next->next;
	        slow=slow->next;
	        if(slow==fast){
	            return true;
	        }
	    }
	    return false;
	}
	void search(){
	    Node * temp= head;
	    int search=0;
	    cout<<"enter search "<<endl;
	    cin>>search;
	    for(temp=head;temp->next!=nullptr;temp=temp->next){
	        if(temp->data==search){
	            cout<<"we fund"<<temp->data<<endl;
	            break;
	        }
	        else{
	            cout<<"we can not found any value same your entered value"<<endl;
	            break;
	        }
	    }
	}
};

int main()
{
    //Stack *s= new Stack();
    //s->push(1);
    //s->push(2);
    //s->push(3);
    //s->print();
    //cout<<"***"<<endl;
    //s->pop();
    //s->pop();
    //s->pop();
    //s->print();
    
    
    Queue * q=new Queue();
    cout<<"queue"<<endl;
    q->enqueue(3);
    q->enqueue(6);
    q->enqueue(7);
    q->enqueue(4);
    q->enqueue(8);
    q->enqueue(5);
    q->search();
    //cout<<"***"<<endl;
    //q->dequeue();
    //q->printqueue();
    //q->reversequeue();
    //cout<<"***"<<endl;
    /*q->printqueue();
    q->sorterenqueue(4);
    cout<<"***"<<endl;
    q->printqueue();
    q->deleteodd();
    cout<<"**cnm*"<<endl;
    q->printqueue();
    cout<<"size"<<endl;
    int a= q->size();
    cout<<a<<endl;
    q->findmiddle();
    cout<<"aşk"<<endl;
    bool solve=q->hasloop();
    cout<<"aşk"<<endl;
    cout<<solve<<"aşk su"<<endl;*/
    
    return 0;
    
}








